<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Hron's blog]]></title>
  <link href="http://hron.me/blog/tags/ruby/atom.xml" rel="self"/>
  <link href="http://hron.me/"/>
  <updated>2013-04-07T04:30:55+02:00</updated>
  <id>http://hron.me/</id>
  <author>
    <name><![CDATA[Gábor Garami]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails pre-commit hook]]></title>
    <link href="http://hron.me/blog/2013/02/rails-pre-commit-hook/"/>
    <updated>2013-02-12T23:23:00+01:00</updated>
    <id>http://hron.me/blog/2013/02/rails-pre-commit-hook</id>
    <content type="html"><![CDATA[<p>I just created this small hook for my Rails projects. It helps me to make my codebase clean.</p>

<p><div><script src='https://gist.github.com/4774014.js?file=git-pre-commit-hook.rb'></script>
<noscript><pre><code>#!/usr/bin/env ruby

require 'erb'
require 'yaml'
require 'pp'

lines = %x{git diff-index --cached --name-only HEAD}.split(/[\r\n]+/)

ENV['RAILS_ENV'] = 'test'

lines.each do |file|
  if File.exists?(file) and file =~ /\.(rb|rake|god)$/
    print &quot;[SYNTAX] #{file} - &quot;
    ret = system(&quot;ruby -c '#{file}'&quot;)
    exit 1 unless ret

    if file =~ /_test\.rb$/
      print &quot;[UNIT  ] #{file} - &quot;
      unitcmd = &quot;ruby -Ilib:test #{file}&quot;
      unitcmd = &quot;bundle exec #{unitcmd}&quot; if File.exists?('Gemfile')
      ret = system(unitcmd)
      exit 1 unless ret
    end

    if file =~ /_spec\.rb$/
      print &quot;[SPEC  ] #{file} - &quot;
      rspeccmd = &quot;rspec #{file}&quot;
      rspeccmd = &quot;bundle exec #{rspeccmd}&quot; if File.exists?('Gemfile')
      ret = system(rspeccmd)
      exit 1 unless ret
    end
  end

  if File.exists?(file) and File.basename(file) =~ /^(Capfile|Gemfile|Guardfile|Rakefile|config.ru)$/
    print &quot;[SYNTAX] #{file} - &quot;
    ret = system(&quot;ruby -c '#{file}'&quot;)
    exit 1 unless ret
  end

  if File.exists?(file) and file =~ /\.feature$/
    print &quot;[ (::) ] #{file} - &quot;
    ENV['CUCUMBER_FORMAT'] = 'progress'
    cuccmd = &quot;cucumber #{file}&quot;
    cuccmd = &quot;bundle exec #{cuccmd}&quot; if File.exists?('Gemfile')
    ret = system(cuccmd)
    exit 1 unless ret
  end

  if File.exists?(file) and file =~ /\.(yml|yaml)$/
    print &quot;[SYNTAX] #{file} - &quot;
    begin
      # Load with erb to avoid problems with cucumber's yml
      erb = ERB.new(IO.read(file)).result(binding)
      yaml = YAML.load(erb)
      puts &quot;Syntax OK&quot;
    rescue SyntaxError =&gt; ex
      puts ex.message
      exit 1
    rescue ArgumentError =&gt; ex
      puts ex.message
      exit 1
    end
  end
end
</code></pre></noscript></div>
</p>

<p>You can clone it at <a href="https://gist.github.com/hron84/4774014">Gist</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMine és TeamCity]]></title>
    <link href="http://hron.me/blog/2012/11/rubymine-es-teamcity/"/>
    <updated>2012-11-11T11:08:00+01:00</updated>
    <id>http://hron.me/blog/2012/11/rubymine-es-teamcity</id>
    <content type="html"><![CDATA[<p>Már régóta keresek egy olyan IDE-t, ami képes nem csak projektszinten kezelni és szintaxis-kiemelést adni a Ruby/Rails projektjeimnek,
de magát a nyelvet is "beszéli", vagyis van például kódkiegészítés, refaktorálás, figyelmeztetések, etc, etc.
Az általam eddig ismert legkomolyabb IDE, a NetBeans is csak elég alapszinten beszélte a Ruby nyelvet - aztán ki is vették belőle a támogatást,
jelenleg a plugin folyamatosan haláltusáját vívja, 7.2-höz már meg sem jelent semmiféle verzió.</p>

<p>Egy StackOverflow böngészés során akadtam rá a JetBrains <a href="http://www.jetbrains.com/ruby/">RubyMine</a> nevű IDE-jére. Saját bevallásuk szerint az
eszköz képes nyelvi szinten is kezelni a Ruby-t, illetve támogatja az összes nagyobb teszkörnyezetet. Mivel amúgy is épp indítottam egy projektet,
úgy gondoltam, adok neki egy esélyt, hát legfeljebb letörlöm, és folytatom az eddigi módon, TextMate és Vim párossal. Szerencsére csalódtam. Pozitívan.
Hatalmasat.</p>

<p>A RubyMine ugyanis nem csak egyszerűen jó, hanem - amennyire tudom - a maga nemében jelenleg páratlan a piacon azzal, hogy tényleg hozza azt, amit ígér,
vagyis teljes mértékben támogatja a Ruby nyelvet és a Rails keretrendszert, sőt, még ennél is tovább megy, beépített támogatása van a lokalizációk kezeléséhez,
grafikusan mutatja, hogy mely mdoeljeink vannak adatbázisban, képes a Rails projekt szerkezetét Rails-aspektusú nézetben mutatni (ahol nem mappák és fájlok vannak,
hanem kategóriák, pl. Controllers, Models, Helpers), a kontrollerek akcióihoz hozzá tudja rendelni a nézeteket, partialokat, a refaktor során pedig olyan mélységekbe is
lemegy, amiről álmodni sem mertem soha - egy modell átnevezésekor képes a nézetekben is utánanézni az útvonal metódusoknak, és megfelelően átnevezni azokat!</p>

<p>Ezen felül csak úgy mellékesen, képes kezelni az <a href="http://rvm.io">RVM</a>-et, támogatja a <a href="http://gembundler.com/">Bundler</a>t, a Rails generátorokat, a Rake taszkokat, SCSS-t meg CoffeeScript-et, ... meg ilyen kis semmiségeket is.</p>

<p>Az egyetlen probléma vele a kissé hiperaktív kódkiegészítése, ha leírok egy nyilat, rögtön ugrana rá, pedig én magamtól szoktam szóközt is ütni utána, de azzal meg
elfogadom az első lehetőséget is egyben - ami általában rossz ötlet. Biztos le lehet valahogy beszélni róla, majd utánanézek (de ha valaki tudja a tuti megoldást,
a komment doboz mindig nyitott az ilyesmikre :-) ), egyelőre még elviselem.</p>

<p>Jelenleg folyamatosan használom az épp aktív projektemhez, teljesen jól szolgál, bár még képességeinek csak szerény részét használom. Most egyelőre a 30 napos
próbaidőszakban vagyunk (dicséretes, hogy ez alatt sem ugrál föl valami kis ablak indításkor, hogy még 22.45 nap van hátra, és mostazonnal vedd meg - ez rém undorító,
ha tetszik, úgyis megveszem - főleg, mert lejár -, ha meg nem tetszik, akkor ez a kapacitálás csak ront a dolgon), ám azt gondolom, hogy a 66 euro a személyes licencért abszolút megéri.</p>

<p>Amit nem használok belőle (sem), az a Git integráció, nekem a git még mindig parancssoros dolgot jelent, egyszerűbb kiadni a <code>git co feature-awesome-stuff</code> parancsot,
mint GUI-ban kikattintgatni. Legalábbis szerintem.</p>

<p>A JetBrains honlapját tallózgatva (ismét) ráakadtam a <a href="http://www.jetbrains.com/teamcity/">TeamCity</a> nevű CI szerverre is, ezzel egyszer volt már egy futó kapcsolatom, de
valamiért nem sikerült telepíteni, és a végén Jenkins lett belőle. Most ismét kapott tőlem egy lehetőséget, hogy elinduljon, és meggyőzzön. Ezúttal mindkettő sikerült is neki.</p>

<p>A TeamCity-ről azt érdemes tudni, hogy egy olyan Continous Integration szerver (továbbiakban CI szerver), melyet nagyon egyszerű kezelni, és nagyon jól áttekinthető felületet
ad, még egy felületes szemlélő számára is (ezt muszáj volt elsütni :-) ).</p>

<p>A RubyMine fejlesztők blogján pedig találtam egy <a href="http://blog.jetbrains.com/ruby/2009/11/jetbrains-teamcity-continuous-integration-for-ruby/">írást</a>, mely borzasztóan felcsigázta a kíváncsiságomat.
Azt merték ugyanis állítani, hogy  TeamCity beépítetten képes kezelni a RSpec és a Cucumber tesztek kimenetét, arrol riportot készít, hibáról értesít. Plusz, a TeamCity beépítetten támogatja az XMPP alapú notifikációt, amit pl. a Jenkins csak pluginnel tud.</p>

<p>Sajnos a TeamCity egyik hiányossága, hogy ő viszont már csak korlátozott mértékben képes kezelni a Bundlert: képes felismerni a létét, és azon keresztül futtatni a rake taszkokat, de már pl. egy <code>bundle install</code> -t képtelen elengedni, azt kézzel kell egy külön Build Step-ben, viszonylag kacifántosan megoldani. Végül sikerült, de azért nem voltam felhőtlenül boldog.
Viszont az első teszteredmények feledtették velem az ezen a téren történt csalódást, mert pontosan azt kaptam, amit elvártam: mindenféle külön konfiguráció nélkül jelenítete meg a Cucumber es RSpec tesztek eredményét, ráadásul egy egészen barátságos felületen.</p>

<p>Tényleg nem JetBrains reklámnak szánom ezt a postot, de azért annyira érződik mindkét terméken, hogy ezeket olyanok fejlesztik, akik láttak már közelről Rails projektet, meg RVM-et, meg ilyesmit... például a Jenkins Ruby pluginjénél nem volt ilyen érzésem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub powa]]></title>
    <link href="http://hron.me/blog/2012/10/github-powa/"/>
    <updated>2012-10-21T01:53:00+02:00</updated>
    <id>http://hron.me/blog/2012/10/github-powa</id>
    <content type="html"><![CDATA[<p>Egy régóta dédelgetett álom vált ma valóra: végre megtaláltam a megfelelő környezetet arra, hogy felköltözzem a GitHub-ra.
Már régóta tervezgettem a költözést, egészen pontosan azóta, amióta olvastam a <a href="http://pages.github.com">GitHub Pages</a>
szolgáltatásról - már nem tudom, hol. Mert igazából ez az, ami nekem kell: egy szövegfájl, amibe beleírom a gondolataimat,
néhány egyszerű trükk, amivel megformázom, és végül pár gombnyomás, amivel beküldöm.</p>

<!-- more -->


<h2>Blogtörténelem</h2>

<p>Eredetileg Wordpress alapú blogom volt. Az túlzás lenne, hogy szerettem, mondjuk, hogy kedveltem. Mármint a blogot. Az adminfelületét már
nem annyira, azt pedig főleg nem, hogy állandóan nyüzsgött valami miatt. Most ez a plugin frissült, most a Wordpress frissült,
most épp valami spam van... őszintén szólva egy idő után azt vettem észre, hogy belépek azzal, hogy na most cikket írok, aztán
a végén plugint frissítettem - a cikkre meg valahogy elszállt az ihlet.</p>

<p>Ezután volt egy hosszabb időszak, amikor saját készítésű (Rails alapú, mi más? :-) ) blogmotoron futottak a dolgok. Ez is zsákutcának
bizonyult, bár másért, mint a WP: nem volt elég szabadidőm arra, hogy igényesen megcsináljam. Zavart az, hogy lehetne sokkal jobb is.</p>

<p>A legutolsó időszak a <a href="http://posterous.com/">Posterous</a>-on zajlott. Imádnivaló blogszolgáltatás - apróbb és nagyobb hibákkal.
Az első és - számomra - legzavaróbb bugja az URL generálással volt kapcsolatos. Nem tudom, ki-hogy van vele, én nem rajongok a generált
ID-re végződő URL-ekért. No nem mintha seo mániás lennék, egyszerűen zavarja a szépérzékemet. Volt olyan cikk a blogon, amit 5x kellett
elmenteni, hogy végre észrevegye magát a motor, hogy én itt bizony címet adtam a bejegyzésnek. De ez nem is lenne gond, ha felül lehetne
bírálni az automatát, mert bepöttyentem én azt a három ékezetmentes szót kötőjellel elválaszva, amit ő generálna ki - csakhogy erre esély
sem volt.</p>

<p>A másik bug inkább csak szomorú mint zavaró volt: semmilyen kódformázási lehetőség nem volt. Beszúrhattál &lt;code&gt; taget a cikkbe, és
ennyi. Még rendes class-t sem tudtam neki adni, mert a motor leirtott minden egyénieskedési törekvést, így nem jöhettek szóba a JS alapú
kódszinezők sem.</p>

<p>A harmadik problémát a Posterous cloud-szerű működése jelentette. Nem tetszettek a beépített témák, sajátot akartam. Ezt végül véghez is
vittem, de a témához tartozó fájlokat egyszerűen nem tudtam a bloggal együtt tároltatni, egy külön helyről kellett szedni őket. Ezzel addig
nincs is baj, amíg egy reggel arra nem ébredek, hogy a blog képeit, CSS-eit, egyéb izémicsodáit tároló hely elérhetetlen. Ez azt
eredményezi, hogy van egy olvashatatlan blogom. Nem egy kellemes dolog.</p>

<p>Most viszont úgy néz ki, a <strong>GitHub Pages</strong> és az <a href="http://octopress.org">Octopress</a> megoldotta minden problémámat.
Nincs frissítési kötelezettség, az oldal plain HTML-ben tárolódik; a cikkeket az éppen aktuális kedvenc editoromban írhatom meg;
használhatom a kedvenc leírónyelvemet, a <a href="http://daringfireball.net/projects/markdown/">Markdown</a>-t, a cikkek URL-je automatikusan
generálódik, ha nem jó, beleszólhatok; a spammentességről pedig a <a href="http://disqus.com">Disqus</a> gondoskodik.</p>

<p>Az egyetlen dolog, ami hibádzik, és ezt nagyon szerettem a Posterous-ban, hogy ha ráküldtem e-mailben egy képet,
azt képes volt bejegyzéssé alakítani, és kirakni. Viszont szerencsére ez egy nagyon könnyen megvalósítható funkció.</p>

<p>Összességében úgy gondolom, hogy keveset veszítettem, de azt mind visszanyertem abban, hogy ez a blog nem igényel gondozást.
Nem kell aggódnom a spamek miatt, nem kell várakoznom a frissítésekre, nem kell tűnődni, hogy hogyan illesszek be kódot olvashatóan,
és nem kell túl sokat fejlesztenem se.</p>

<p><strong>PS</strong>: sajnos a Posterous-os kommenteket nem tudom ide áthozni, azok elvesztek számotokra. Szerencsére (?) nem volt túl sok...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins, RVM, Bundler]]></title>
    <link href="http://hron.me/blog/2012/02/jenkins-rvm-bundler/"/>
    <updated>2012-02-15T22:57:00+01:00</updated>
    <id>http://hron.me/blog/2012/02/jenkins-rvm-bundler</id>
    <content type="html"><![CDATA[<p>Preface: Sorry for my poor english.</p>

<p>So, today I started thinking on how can I compile my rails app to different Ruby versions. Luckily, I discovered, Jenkins can use RVM to run rake tasks.</p>

<p>I initialized rvm following <a href="http://watirmelon.com/2011/08/29/running-your-watir-webdriver-tests-in-the-cloud-for-free/">this tutorial</a> but I just skipped EC2 instance creation, because I currently has a CI server. I installed three ruby version, MRI 1.8.7, MRI 1.9.3, and JRuby latest stable.</p>

<p>First, I created a Rakefile.bootstrap file in my project root to make bundle install phase to rake-ized because I wouldn't like run this via shell state, as because I need to select the correct rvm what is can be changed and I wouldn't like administer it on thee or more places.</p>

<p>Then, I was naive. I thinked I use separated gemset to avoid infecting global ruby scope with my project's gems.</p>

<p>This is quite easy, I sudo-ed to jenkins, and created gemset by <code>rvm gemset create rhcp</code>. After viewing and saving Jenkins' main configuration are, rake plugin recognized this gemset, and offered to use it.</p>

<p>I clicked on it, saved the project, clicked on build, and pray (in the future: c&amp;p). No luck.</p>

<p>I spent a half of hour with investigation, and I found I need install rake to the target gemset too, not enough if it is installed with ruby or installed to the @global gemset. I installed rake, c&amp;p. No luck.</p>

<p>After it, I ran into <a href="http://stackoverflow.com/questions/3456304/rake-aborted-stack-level-too-deep">this problem</a>. Because rake loaded twice, it lost in the stack, and just gave up.</p>

<p>So, I added rake proxy for my bootstrap Rake file. It means calls the rake command prefixed by 'bundle exec' since Jenkins cannot do this. Bundler cleans out unneccessary gems (eg.g what coming from @global, or from ruby itself) and executes rake command.</p>

<p>This is the final Rakefile.bootstrap if you want to use it:</p>

<p>&nbsp;</p>

<script src="https://gist.github.com/1838983.js?file=gistfile1.rb"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails with mongrel: cache_template_loading]]></title>
    <link href="http://hron.me/blog/2008/11/rails-with-mongrel-cache_template_loading/"/>
    <updated>2008-11-30T02:33:40+01:00</updated>
    <id>http://hron.me/blog/2008/11/rails-with-mongrel-cache_template_loading</id>
    <content type="html"><![CDATA[<p>Almos vagyok, ugyhogy ez most csak egy <a href="http://railsforum.com/viewtopic.php?id=23648" class="bb-url">link</a></p>

]]></content>
  </entry>
  
</feed>
