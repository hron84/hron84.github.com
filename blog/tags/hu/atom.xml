<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hu | Hron's blog]]></title>
  <link href="http://hron84.github.com/blog/tags/hu/atom.xml" rel="self"/>
  <link href="http://hron84.github.com/"/>
  <updated>2012-10-21T19:34:29+02:00</updated>
  <id>http://hron84.github.com/</id>
  <author>
    <name><![CDATA[Gábor Garami]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GitHub powa]]></title>
    <link href="http://hron84.github.com/blog/2012/10/github-powa/"/>
    <updated>2012-10-21T01:53:00+02:00</updated>
    <id>http://hron84.github.com/blog/2012/10/github-powa</id>
    <content type="html"><![CDATA[<p>Egy régóta dédelgetett álom vált ma valóra: végre megtaláltam a megfelelő környezetet arra, hogy felköltözzem a GitHub-ra.
Már régóta tervezgettem a költözést, egészen pontosan azóta, amióta olvastam a <a href="http://pages.github.com">GitHub Pages</a>
szolgáltatásról - már nem tudom, hol. Mert igazából ez az, ami nekem kell: egy szövegfájl, amibe beleírom a gondolataimat,
néhány egyszerű trükk, amivel megformázom, és végül pár gombnyomás, amivel beküldöm.</p>

<!-- more -->


<h2>Blogtörténelem</h2>

<p>Eredetileg Wordpress alapú blogom volt. Az túlzás lenne, hogy szerettem, mondjuk, hogy kedveltem. Mármint a blogot. Az adminfelületét már
nem annyira, azt pedig főleg nem, hogy állandóan nyüzsgött valami miatt. Most ez a plugin frissült, most a Wordpress frissült,
most épp valami spam van... őszintén szólva egy idő után azt vettem észre, hogy belépek azzal, hogy na most cikket írok, aztán
a végén plugint frissítettem - a cikkre meg valahogy elszállt az ihlet.</p>

<p>Ezután volt egy hosszabb időszak, amikor saját készítésű (Rails alapú, mi más? :-) ) blogmotoron futottak a dolgok. Ez is zsákutcának
bizonyult, bár másért, mint a WP: nem volt elég szabadidőm arra, hogy igényesen megcsináljam. Zavart az, hogy lehetne sokkal jobb is.</p>

<p>A legutolsó időszak a <a href="http://posterous.com/">Posterous</a>-on zajlott. Imádnivaló blogszolgáltatás - apróbb és nagyobb hibákkal.
Az első és - számomra - legzavaróbb bugja az URL generálással volt kapcsolatos. Nem tudom, ki-hogy van vele, én nem rajongok a generált
ID-re végződő URL-ekért. No nem mintha seo mániás lennék, egyszerűen zavarja a szépérzékemet. Volt olyan cikk a blogon, amit 5x kellett
elmenteni, hogy végre észrevegye magát a motor, hogy én itt bizony címet adtam a bejegyzésnek. De ez nem is lenne gond, ha felül lehetne
bírálni az automatát, mert bepöttyentem én azt a három ékezetmentes szót kötőjellel elválaszva, amit ő generálna ki - csakhogy erre esély
sem volt.</p>

<p>A másik bug inkább csak szomorú mint zavaró volt: semmilyen kódformázási lehetőség nem volt. Beszúrhattál &lt;code&gt; taget a cikkbe, és
ennyi. Még rendes class-t sem tudtam neki adni, mert a motor leirtott minden egyénieskedési törekvést, így nem jöhettek szóba a JS alapú
kódszinezők sem.</p>

<p>A harmadik problémát a Posterous cloud-szerű működése jelentette. Nem tetszettek a beépített témák, sajátot akartam. Ezt végül véghez is
vittem, de a témához tartozó fájlokat egyszerűen nem tudtam a bloggal együtt tároltatni, egy külön helyről kellett szedni őket. Ezzel addig
nincs is baj, amíg egy reggel arra nem ébredek, hogy a blog képeit, CSS-eit, egyéb izémicsodáit tároló hely elérhetetlen. Ez azt
eredményezi, hogy van egy olvashatatlan blogom. Nem egy kellemes dolog.</p>

<p>Most viszont úgy néz ki, a <strong>GitHub Pages</strong> és az <a href="http://octopress.org">Octopress</a> megoldotta minden problémámat.
Nincs frissítési kötelezettség, az oldal plain HTML-ben tárolódik; a cikkeket az éppen aktuális kedvenc editoromban írhatom meg;
használhatom a kedvenc leírónyelvemet, a <a href="http://daringfireball.net/projects/markdown/">Markdown</a>-t, a cikkek URL-je automatikusan
generálódik, ha nem jó, beleszólhatok; a spammentességről pedig a <a href="http://disqus.com">Disqus</a> gondoskodik.</p>

<p>Az egyetlen dolog, ami hibádzik, és ezt nagyon szerettem a Posterous-ban, hogy ha ráküldtem e-mailben egy képet,
azt képes volt bejegyzéssé alakítani, és kirakni. Viszont szerencsére ez egy nagyon könnyen megvalósítható funkció.</p>

<p>Összességében úgy gondolom, hogy keveset veszítettem, de azt mind visszanyertem abban, hogy ez a blog nem igényel gondozást.
Nem kell aggódnom a spamek miatt, nem kell várakoznom a frissítésekre, nem kell tűnődni, hogy hogyan illesszek be kódot olvashatóan,
és nem kell túl sokat fejlesztenem se.</p>

<p><strong>PS</strong>: sajnos a Posterous-os kommenteket nem tudom ide áthozni, azok elvesztek számotokra. Szerencsére (?) nem volt túl sok...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Valamit másképpen]]></title>
    <link href="http://hron84.github.com/blog/2012/09/valamit-maskeppen/"/>
    <updated>2012-09-09T01:14:58+02:00</updated>
    <id>http://hron84.github.com/blog/2012/09/valamit-maskeppen</id>
    <content type="html"><![CDATA[<p>A HUP-on bedobott <a href="http://hup.hu/szavazasok/20120908/mit_tennel_az_utolso_napodon">szavaz&aacute;s</a>&nbsp;gondolkodtatott el azon, hogy csin&aacute;ln&eacute;k-e valamit alapvet&ouml;en m&aacute;sk&eacute;ppen, ha &uacute;jrakezdhetn&eacute;m az &eacute;letemet. Nagyon cs&aacute;b&iacute;t&oacute; a lehet&ouml;s&eacute;g, mert hib&aacute;ztam, nem is egyszer, sokszor, n&eacute;ha kicsit, n&eacute;ha nagyot.</p>

<p>Akkor &eacute;s ott &uacute;gy &eacute;reztem, hogy nagyon gyorsan meg kellene nyomni a backspace gombot, &eacute;s nekifutni megint. De ut&oacute;lag visszan&eacute;zve mindig r&aacute;j&ouml;v&ouml;k, hogy h&uuml;lyes&eacute;g lett volna. Mert akkor egy csom&oacute; j&oacute; dolog sem t&ouml;rt&eacute;nt volna meg velem az &eacute;letben.</p>

<p>Tal&aacute;n egyetlen esem&eacute;ny van, amit megakad&aacute;lyozn&eacute;k, b&aacute;r jelenleg nem tudom felm&eacute;rni, mekkora hat&aacute;sa lenne: a tavalyel&ouml;tt ny&aacute;ri esem&eacute;nyeket. Az az egy h&oacute;napnyi k&iacute;nl&oacute;d&aacute;s lehet, hogy megsp&oacute;rolhat&oacute; lett volna. Nem biztos, de lehet.</p>

<p>De a t&ouml;bbin nem v&aacute;ltoztatn&eacute;k. S&ouml;t, m&eacute;g csak azt sem szeretn&eacute;m, hogy eg&eacute;szs&eacute;gesen sz&uuml;lessek. Nem volt egyszer&uuml; a betegs&eacute;gemmel, ez t&eacute;ny. &Eacute;s azt is tudom, hogy a k&ouml;rnyezetemnek sem volt egyszer&uuml;. De ha nem annak sz&uuml;letek, akinek, ma nem lehetek az, aki, &eacute;s nem lehetnek azok a bar&aacute;taim, akik. A k&eacute;t legjobb bar&aacute;tomat &uacute;gy ismertem meg, hogy interneten k&eacute;rtek t&ouml;lem seg&iacute;ts&eacute;get. Eg&eacute;szs&eacute;gesk&eacute;nt tal&aacute;n nem &uuml;ln&eacute;k ennyit a g&eacute;p el&ouml;tt, hiszen nagyon impulz&iacute;v &eacute;s akt&iacute;v emberke vagyok egy&eacute;bk&eacute;nt, de ez azzal j&aacute;r, hogy lemaradn&eacute;k mindenr&ouml;l, ami most fontos.
Emiatt gondolom azt, hogy - b&aacute;r kellemetlen, de - nem baj az, ami van velem. &Eacute;n egy picit m&aacute;s vagyok, n&aacute;lam ez az "eg&eacute;szs&eacute;ges".</p>

<p>V&aacute;lasztan&eacute;k-e m&aacute;sik csal&aacute;dot, k&ouml;rnyezetet? Aki k&ouml;zelebbr&ouml;l ismer, tudja, hogy n&aacute;lam m&eacute;g ez sem egy egyszer&uuml; eld&ouml;ntend&ouml; k&eacute;rd&eacute;s. De &uacute;gy gondolom, nem. Nem volt sima &eacute;letem, voltak g&ouml;r&ouml;ngy&ouml;k, bukkan&oacute;k, hegyek &eacute;s v&ouml;lgyek. Volt, amikor nagy volt a s&ouml;t&eacute;t, volt amikor sok volt a f&eacute;ny. De hiszem, hogy ezek is seg&iacute;tettek olyann&aacute; form&aacute;lni, amilyen most vagyok.&nbsp;</p>

<p>Csak n&eacute;h&aacute;ny dolog van, amiken v&aacute;ltoztatn&eacute;k. P&aacute;r &eacute;letvitelbeli apr&oacute;s&aacute;g. P&aacute;r apr&oacute; t&aacute;rgy, amire jobban vigy&aacute;zn&eacute;k. &Eacute;s n&eacute;h&aacute;ny ember, akikkel egy kicsit t&ouml;bb id&ouml;t t&ouml;lten&eacute;k, kicsit jobban szeretn&eacute;m &ouml;ket, mert &uacute;gy &eacute;rzem, ad&oacute;s maradtam. De ez minden.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continous deployment, vagy afféle]]></title>
    <link href="http://hron84.github.com/blog/2012/06/continous-deployment-vagy-affele/"/>
    <updated>2012-06-07T00:56:00+02:00</updated>
    <id>http://hron84.github.com/blog/2012/06/continous-deployment-vagy-affele</id>
    <content type="html"><![CDATA[<p>Az ember a netet olvasgatva &eacute;rdekes dolgokra tud bukkanni, illetve sokszor nagyon j&oacute; &ouml;tleteket lehet kapni puszt&aacute;n a m&aacute;sok &iacute;r&aacute;saib&oacute;l.</p>

<p><a href="http://infokukac.com/2011/11/csak-egy-gombnyomas%E2%80%A6/">Info@ &iacute;rt</a> arr&oacute;l, hogy n&aacute;luk hogy ker&uuml;lt bevezet&eacute;sre az, hogy a tesztel&ouml;k gombnyom&aacute;sra deployolnak a teszt rendszerre verzi&oacute;kat. B&aacute;r n&aacute;lam max 1 tesztel&ouml; lenne, &eacute;s &ouml;t sem szeretn&eacute;m a Jenkins k&ouml;zel&eacute;be engedni, az&eacute;rt elgondolkodtatott a dolog: mi volna, ha a Jenkins egyr&eacute;szt monitorozn&aacute; a deploy &aacute;gat (ez n&aacute;lam a master &aacute;g, <a href="http://hron.me/123836765">amint azt m&aacute;r eml&iacute;tettem</a>), ezen v&eacute;grehajtana egy deployment tesztet is a staging k&ouml;rnyezetre (ezzel lenne egy folyamatosan friss teszt k&ouml;rnyezet), illetve adott esetben meg lehetne k&eacute;rni &ouml;t arra, hogy, legyen m&aacute;r kedves az &eacute;les szerverre is kidobni az aktu&aacute;l k&oacute;dot.</p>

<p>Ez amennyire bonyolultan hangzik, annyira egyszer&uuml; volt megoldani. Egyr&eacute;szt a staging &eacute;s az &eacute;les szerverre fel kellett venni a Jenkins saj&aacute;t SSH kulcs&aacute;t (m&aacute;r r&eacute;gebbr&ouml;l volt ilyenem, mert a Jenkins slave-k kezel&eacute;s&eacute;hez kell), m&aacute;sr&eacute;szt kellett k&eacute;t olyan jobot csin&aacute;lni, amelyek elv&eacute;gzik a fent eml&iacute;tett k&eacute;t m&uuml;veletet.</p>

<p>Ut&aacute;na fogtam, lem&aacute;soltam azt a jobot, ami a norm&aacute;l (nem deployol&oacute;s) teszteket csin&aacute;lja, hozz&aacute;csaptam m&eacute;g egy l&eacute;p&eacute;st, miszerint deployoljon is a staging k&ouml;rnyezetbe. Illetve &aacute;t&iacute;rtam, hogy a master &aacute;gat figyelje.
Annyit m&eacute;g egyszer&uuml;s&iacute;tettem a dolgon, hogy egyik tesztn&eacute;l sem csin&aacute;lok coverage m&eacute;r&eacute;st, mert ez csak lass&iacute;tja a tesztek futtat&aacute;s&aacute;t, de &eacute;rdemi eredm&eacute;nyt nem ad hozz&aacute; a teszthez, hiszen itt a tesztek lefut&aacute;sa is csak az&eacute;rt fontos, hogy ha valaki v&eacute;letlen&uuml;l r&aacute;comittolt volna az &eacute;les &aacute;gra, miel&ouml;tt lefutna a deployment teszt, az m&eacute;g kibukjon. De &aacute;ltal&aacute;ban senki nem szokott.</p>

<p>Az &eacute;les deploy job annyiban volt k&uuml;l&ouml;nb&ouml;z&ouml; ett&ouml;l, hogy itt m&eacute;g kikapcsoltam a pollingoz&aacute;st is, mert ezt k&eacute;zzel (na j&oacute;, XMPP-n kereszt&uuml;l) fogom triggerelni, &eacute;s csak akkor, ha a staging k&ouml;rnyezetbe rendben kiker&uuml;lt a k&oacute;d, illetve mindenki j&oacute;v&aacute;hagyta a m&uuml;k&ouml;d&eacute;st is. Egy&eacute;bk&eacute;nt az el&ouml;z&ouml; job m&aacute;solata volt.</p>

<p>&Iacute;gy gyakorlatilag az van, hogy amikor release van, akkor szok&aacute;s szerint mergelek egyet a master &aacute;gra, ezt felnyomom a git rep&oacute;ba, majd neki&aacute;llok t&uuml;relmetlen&uuml;l lesni az IM kliensem ablak&aacute;t. N&eacute;mi id&ouml; eltelt&eacute;vel a Jenkins besz&oacute;l, hogy (j&oacute; esetben) az aktu&aacute;lis job &aacute;tment minden l&eacute;p&eacute;sen, &eacute;s k&eacute;szen &aacute;ll az &eacute;les&iacute;t&eacute;sre. Ekkor megk&eacute;rem a jenkins-t, hogy deployoljon (jenkins, build project-deploy now), ez &aacute;tfuttatja m&eacute;g egyszer a teszteket, majd kiteszi az &eacute;les szerverre a k&oacute;dot, &uacute;jraind&iacute;tja a thin webszervert hozz&aacute;, &eacute;s k&eacute;sz is. Mivel mind a teszteknek mind a deploymentnek r&eacute;sze az adatb&aacute;zis friss&iacute;t&eacute;se is (rake db:migrate), &iacute;gy nem fordulhat el&ouml;, hogy a db s&eacute;ma miatt halunk meg.</p>

<p>Az&eacute;rt itt m&eacute;g nincs v&eacute;ge a t&ouml;rt&eacute;netnek, a k&ouml;vetkez&ouml; l&eacute;p&eacute;s az, hogy ellen&ouml;rizni kell, hogy az app fel is bootolt-e tisztess&eacute;gesen. Sajnos a thin webszervernek megvan az a kellemetlen tulajdons&aacute;ga, hogy csak azt v&aacute;rja meg, am&iacute;g &ouml; maga meg a k&ouml;rnyezete felbootol, miel&ouml;tt forkol, mag&aacute;t a rails appot nem v&aacute;rja be. Vagyis lehet, hogy &uacute;gy kapsz HTTP 500-at, hogy am&uacute;gy a thin azt jelezte vissza, hogy sikeresen elindult (a deployment utols&oacute; mozzanata az appszerver &uacute;jraind&iacute;t&aacute;sa). Egyel&ouml;re most a k&eacute;zi mel&oacute; is j&oacute;, a j&ouml;v&ouml;ben meg sztem lesz egy negat&iacute;v teszt, egy fix oldalra fogok egy curl-t h&iacute;vni, ha HTTP 200 j&ouml;n vissza, m&aacute;r j&oacute;k vagyunk.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qt fordítás kezdőknek]]></title>
    <link href="http://hron84.github.com/blog/2012/04/qt-forditas-kezdoknek/"/>
    <updated>2012-04-20T15:59:00+02:00</updated>
    <id>http://hron84.github.com/blog/2012/04/qt-forditas-kezdoknek</id>
    <content type="html"><![CDATA[<p>Nasz&oacute;val, ez a cikk itten arr&oacute;l fog sz&oacute;lni, hogy hogyan ford&iacute;tsunk magunknak forr&aacute;sb&oacute;l Qt-t &uacute;gy, hogy az ne piszk&iacute;tsa &ouml;ssze a rendszer&uuml;nket.</p>

<p>Hogy ez mi&eacute;rt is j&oacute;?</p>

<ul>
<li>A rendszer&uuml;nk r&eacute;gi Qt-t sz&aacute;ll&iacute;t, mi pedig egy &uacute;jhoz szeretn&eacute;nk fejleszteni</li>
<li>A Qt nyelvi f&aacute;jlokba akarunk belet&uacute;rni</li>
</ul>


<!-- more -->


<p>Az első l&eacute;p&eacute;s a megfelelő git repo lekl&oacute;noz&aacute;sa. Ez &aacute;ltal&aacute;ban a git://gitorious.org/qt/qt.git, de haszn&aacute;lhatunk m&aacute;s kl&oacute;nokat is:</p>

<p><code>
hron@laptop workspace $ git clone git://gitorious.org/qt/qt.git &amp;amp;&amp;amp; cd qt
hron@laptop qt (master) $
</code></p>

<p>Egy p&aacute;r sz&oacute;t a promptr&oacute;l: az első k&eacute;t szekci&oacute; mindenkinek ismert kell hogy legyen, ugye felhaszn&aacute;l&oacute;n&eacute;v@g&eacute;pn&eacute;v illetve az aktu&aacute;lis mappa neve. A z&aacute;r&oacute;jeles r&eacute;sz tr&uuml;kk&ouml;sebb, ide az aktu&aacute;lis git <em>branch</em> neve ker&uuml;l, hogy egy&eacute;rtelmű legyen, hol dolgozunk. &Aacute;ltal&aacute;ban az alap&eacute;rtelmezett branch a <strong>master</strong> nevű, kl&oacute;noz&aacute;s ut&aacute;n teh&aacute;t ide jutunk.</p>

<p>Ezut&aacute;n ki kell v&aacute;lasztani a megfelelő branchet (a master szinte percről-percre v&aacute;ltozik, azzal nem &eacute;rdemes foglalkozni). A lehetős&eacute;gek t&aacute;rh&aacute;z&aacute;t a "git branch -r" parancs mutatja meg, v&aacute;lasztani a "git checkout -b <em>branch</em> origin/<em>branch</em>" paranccsal tudunk. &Eacute;n most a 4.7-es branchet fogom előszedni:</p>

<p><code>
hron@laptop qt (master) $ git checkout -b 4.7 origin/4.7
hron@laptop qt (4.7) $
</code></p>

<p>Ezut&aacute;n kezdődhet az &eacute;rdemi ford&iacute;t&aacute;s. A ford&iacute;t&aacute;s ugyan nem autoconf/automake alap&uacute;, a kezdeti l&eacute;p&eacute;st m&eacute;gis a configure script megfelelő param&eacute;terekkel t&ouml;rt&eacute;nő futtat&aacute;sa jelenti:</p>

<p><code>
hron@laptop qt (4.7) $ ./configure -developer-build -opensource -confirm-license -nomake demos -nomake examples
hron@laptop qt (4.7) $
</code></p>

<p>A scriptnek van --help kapcsol&oacute;ja, mely ismerteti az &ouml;sszes haszn&aacute;lhat&oacute; kapcsol&oacute;t, &eacute;n az itt haszn&aacute;lt n&eacute;gyet emeln&eacute;m ki:</p>

<ul>
<li><strong>-developer-build</strong>: Arra utas&iacute;tja a ford&iacute;t&aacute;si rendszert, hogy ne a szok&aacute;sos /usr/lib/ jellegű &uacute;tvonalon keresse a libeket, hanem az aktu&aacute;lis k&ouml;nyvt&aacute;rban</li>
<li><strong>-opensource</strong>: A ny&iacute;lt forr&aacute;s&uacute; verzi&oacute;t ford&iacute;tjuk</li>
<li><strong>-confirm-license</strong>: Egy kis k&ouml;nnyebbs&eacute;g, nem kell interakt&iacute;van elfogadni a licencet. Scriptel&eacute;sn&eacute;l hasznos.</li>
<li><strong>-nomake</strong>: A param&eacute;terk&eacute;nt megadott k&ouml;nyvt&aacute;rban levő cuccokat nem fogja leford&iacute;tani. Nagyj&aacute;b&oacute;l a fenti k&eacute;t k&ouml;nyvt&aacute;r eset&eacute;ben van &eacute;rtelme haszn&aacute;lni, a t&ouml;bbin&eacute;l funkcioveszt&eacute;st kapunk ha haszn&aacute;ljuk (az src k&ouml;nyvt&aacute;r kiz&aacute;r&aacute;s&aacute;val meg nem kapunk semmit :-) ).</li>
</ul>


<p>Ezut&aacute;n egy kis molyol&aacute;s k&ouml;vetkezik, lefordul a <em>qmake</em> eszk&ouml;z, mely a Qt projektek ford&iacute;t&aacute;s&aacute;&eacute;rt felelős, majd ha m&aacute;r ott van, le is futtat&oacute;dik az &ouml;sszes qt-s cuccon, legener&aacute;lva a sz&uuml;ks&eacute;ges <em>Makefile</em>-okat.</p>

<p>Ezut&aacute;n a j&oacute;l ismert make parancs k&ouml;vetkezik, mely leforgatja a Qt forr&aacute;st.</p>

<p>Ha a nyelvi f&aacute;jlok friss&iacute;t&eacute;s&eacute;n t&ouml;rj&uuml;k a fej&uuml;nket, akkor ezen a ponton van m&eacute;g egy teendőnk: ha eld&ouml;nt&ouml;tt&uuml;k mely nyelvi f&aacute;jlokkal akarunk dolgozni (a p&eacute;ld&aacute;ban ez a 'hu' lesz), akkor az al&aacute;bbi parancsra van sz&uuml;ks&eacute;g&uuml;nk:</p>

<p><code>
hron@laptop qt (4.7) $ make ts-hu
hron@laptop qt (4.7) $
</code></p>

<p>&Eacute;rtelemszerűen, ha a spanyol f&aacute;jlokkal akarunk dolgozni, akkor a param&eacute;ter <em>ts-es</em> lesz. Fontos tudni, hogy ez csak a m&aacute;r regisztr&aacute;lt nyelvekre van meg, &uacute;j nyelvn&eacute;l előbb l&eacute;tre kell hozni a megfelelő TS f&aacute;jlokat, lem&aacute;solva egy m&aacute;r l&eacute;tező f&aacute;jlt.</p>

<p>Ezut&aacute;n neki lehet esni a friss&iacute;tett f&aacute;jloknak a <em>Linguist</em> nevű programmal, mely a bin/ k&ouml;nyvt&aacute;rban tal&aacute;lhat&oacute;.</p>

<p>Tipp: ha csak 1-1 projekthez tartoz&oacute; f&aacute;jlt akarunk friss&iacute;teni, azt &iacute;gy tehetj&uuml;k meg:</p>

<p><code>
hron@laptop qt (4.7) $ make ts-designer-hu
 hron@laptop qt (4.7) $
</code></p>

<p>A fenti parancsa&nbsp; translations/designer_hu.ts f&aacute;jlt friss&iacute;ti be.</p>

<p><strong>Nagyon fontos</strong>: Ha beleny&uacute;lunk egy ts f&aacute;jlba, &eacute;s nem vagyunk az adott nyelv ford&iacute;t&oacute;i csapat&aacute;nak tagja, felt&eacute;tlen&uuml;l vegy&uuml;k fel a ford&iacute;t&oacute;(kk)al a kapcsolatot! Ha nem v&aacute;laszolnak, vagy nincs t&aacute;mpontunk hozz&aacute; hogy hol keress&uuml;k őket; Oswald Buddenhagen vezeti a Qt ford&iacute;t&aacute;s&aacute;t, őt mindig meg lehet tal&aacute;lni az irc.freenode.net IRC szerveren, &aacute;ltal&aacute;ban ossi nick alatt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A legjobb Git workflow - továbbfejlesztve]]></title>
    <link href="http://hron84.github.com/blog/2012/04/a-legjobb-git-workflow-tovabbfejlesztve/"/>
    <updated>2012-04-18T23:06:00+02:00</updated>
    <id>http://hron84.github.com/blog/2012/04/a-legjobb-git-workflow-tovabbfejlesztve</id>
    <content type="html"><![CDATA[<p>K&ouml;z&ouml;ns&eacute;gk&eacute;r&eacute;sre, most bevezetem az olvas&oacute;imat abba a Git repo kezel&eacute;si m&oacute;dszertanba, amit a saj&aacute;t projektjeimn&eacute;l haszn&aacute;lok.</p>

<p>Alapul az egyik tal&aacute;n legn&eacute;pszerűbb Git workflow szolg&aacute;lt, melynek le&iacute;r&aacute;sa <a href="http://nvie.com/posts/a-successful-git-branching-model/" title="A successful git branching model">itt tekinthető meg</a>.</p>

<!-- more -->


<p>L&aacute;ssuk az alapfogalmakat, amiket a le&iacute;r&aacute;sban haszn&aacute;lni fogok, ez az &eacute;n terminol&oacute;gi&aacute;m:</p>

<ul>
<li><strong>Master branch</strong>: A repo alap&eacute;rtelmezett branche. A frissen l&eacute;trehozott git repo-n&aacute;l ez a "master" nevű branch, de ak&aacute;rhogy is lehet h&iacute;vni.</li>
<li><strong>Develop branch</strong>: Ezen az &aacute;gon folyik a fejleszt&eacute;s, de k&ouml;zvetlen&uuml;l ide nem commitolunk (lsd. k&eacute;sőbb)</li>
<li><strong>Feature branch</strong>: egy &uacute;j feature fejleszt&eacute;se zajlik  rajta. Ez lehet egy &uacute;j gomb &eacute;s a m&ouml;g&ouml;ttes k&oacute;d, lehet a tesztek &iacute;r&aacute;s&aacute;ra  szolg&aacute;l&oacute; branch, a l&eacute;nyeg, hogy az itt zajl&oacute; v&aacute;ltoz&aacute;sok vagy &uacute;j  funkcionalit&aacute;st adnak a projekthez, vagy annyira jelentősen m&oacute;dos&iacute;tanak  egy meglevő funkcionalit&aacute;st, ami m&aacute;r nem f&eacute;r bele a hotfix branchekbe.</li>
<li><strong>Hotfix branch</strong>: Ide elsősorban hibajav&iacute;t&aacute;sok j&ouml;nnek,  amelyek j&ouml;hetnek valamilyen bugtrackerből, vagy ak&aacute;r bemond&aacute;sra is, ez  m&aacute;r egy&eacute;ni metodika k&eacute;rd&eacute;se. A l&eacute;nyeg: ide olyan v&aacute;ltoztat&aacute;s nem  k&uuml;ldhető be, mely nagy m&eacute;rt&eacute;kben v&aacute;ltoztat a funkcionalit&aacute;son.</li>
</ul>


<p>Sz&oacute;val. amikor indul a repo &eacute;letciklusa, akkor l&eacute;trej&ouml;n a master  branch. A kezdő commit &aacute;ltal&aacute;ban vagy egy .gitignore f&aacute;jl bek&uuml;ld&eacute;s&eacute;ből  &aacute;ll (ez a legt&ouml;bb esetben hasznos, ha megvan), vagy valami hasonl&oacute;,  jelent&eacute;ktelen v&aacute;ltoztat&aacute;sb&oacute;l. Rails projekt eset&eacute;ben &eacute;n azt szoktam  csin&aacute;lni, hogy a legener&aacute;lt &eacute;s kitiszt&iacute;tott projektf&aacute;t k&uuml;ld&ouml;m be, amiben  m&eacute;g semmi nincsen, csak a mapp&aacute;k vannak l&eacute;trehozva, illetve p&aacute;r dolog  felkonfigur&aacute;lva (pl. rspec, cucumber, meg hasonl&oacute;k). Mindenesetre az  alkalmaz&aacute;s itt kezdi meg &eacute;letciklus&aacute;t.</p>

<p>Ez ut&aacute;n r&ouml;gt&ouml;n le is &aacute;gaztatom a develop branchet, majd a develop  branchből az első feature branchet. Fontos, hogy minden feature &eacute;s  hotfix branch a develop &aacute;gb&oacute;l sz&aacute;rmazik.</p>

<p>A feature branchen elkezdem az első dolgokat implement&aacute;lni, majd  amikor az első feature k&eacute;sz (pl. van egy bel&eacute;pő fel&uuml;let), akkor azt  r&aacute;mergelem a develop branchre. A mergel&eacute;sek mindig szigor&uacute;an --no-ff  kapcsol&oacute;val t&ouml;rt&eacute;nnek, mert ez biztos&iacute;tja sz&aacute;munkra azt, hogy a k&eacute;sőbbi  grafikus megjelen&iacute;t&eacute;sekn&eacute;l j&oacute;l elk&uuml;l&ouml;n&iacute;thetően l&aacute;tsz&oacute;djon, hogy honn&eacute;t  sz&aacute;rmazik a v&aacute;ltoztat&aacute;s.</p>

<p>P&eacute;lda:</p>

<p><code>
myproject (feature-add-loginform) $ git checkout develop
myproject (develop) $ git merge --no-ff feature-add-loginform
</code></p>

<p>A hotfix branchekkel ugyan&iacute;gy j&aacute;rok el.</p>

<p>Hogy ne legyen  konfliktus merge-l&eacute;skor, a feature/hotfix brancheket időnk&eacute;nt rebase-lem  a develop-hoz (csak ahhoz), hogy meglegyenek azok a v&aacute;ltoz&aacute;sok is,  amelyeket m&aacute;s branchen k&ouml;vettem el. Ez ugye pl. webalkalmaz&aacute;sn&aacute;l fontos,  hogy ha a diz&aacute;jnon v&aacute;ltoz&aacute;s van, vagy a js-hez &uacute;j funkcionalit&aacute;s  ker&uuml;lt, akkor azt egy, ettől f&uuml;ggelten feature fejleszt&eacute;se sor&aacute;n is  tudjam haszn&aacute;lni (tipikus p&eacute;lda erre az a pont, amikor az &aacute;tmeneti  combobox-okat lev&aacute;ltja egy automatikus kieg&eacute;sz&iacute;t&eacute;s alap&uacute; megold&aacute;s). Ez  egyr&eacute;szt k&eacute;nyelmi okokb&oacute;l fontos, m&aacute;sr&eacute;szt pedig az&eacute;rt, mert ilyenkor  m&aacute;r zajlik a <em>dogfooding</em>, vagyis a saj&aacute;t k&oacute;d felhaszn&aacute;l&oacute;i  szempontb&oacute;l t&ouml;rt&eacute;nő tesztel&eacute;se. Volt m&aacute;r, hogy itt j&ouml;ttek elő olyan  hib&aacute;k, melyeket sem a tesztek, sem az első kattintgat&aacute;sok nem hoztak ki.</p>

<p>Van n&eacute;h&aacute;ny olyan eset, amikor k&ouml;zvetlen&uuml;l a develop &aacute;gra commitolok. A legfőbb szempont ilyenkor, hogy ez csak olyan v&aacute;ltoz&aacute;s lehet, ami nagyon kev&eacute;s f&aacute;jlt &eacute;rint, illetőleg a branchek nagy r&eacute;sz&eacute;nek fontos v&aacute;ltoztat&aacute;s. Ilyen lehet p&eacute;ld&aacute;ul a .gitignore f&aacute;jl felbőv&iacute;t&eacute;se, ha valaki hirtelen boldog Mac tulajdonos lesz, &eacute;s a Mac f&aacute;jlrendszer csod&aacute;it (.DS_Store) ki szeretn&eacute;nk z&aacute;rni a projektből. De ilyen lehet az is, amikor egy &aacute;ltalunk el&uuml;t&eacute;st jav&iacute;tunk ki egy nyelvi f&aacute;jlban, mert erre pl. felesleges lehet egy &uacute;j branchet sz&uuml;lni. Persze ez a fejlesztő/fejlesztők &aacute;ltal k&ouml;vetett m&oacute;dszertant&oacute;l is erősen f&uuml;gghet.
Ilyenkor viszont fontos, hogy minden branch &eacute;rtes&uuml;lj&ouml;n a v&aacute;ltoz&aacute;sokr&oacute;l, &eacute;s rebase-zel maga al&aacute; tegye azokat.</p>

<p>Amikor a projekt el&eacute;rkezett egy <em>milestone</em>-hoz,  akkor t&ouml;rt&eacute;nik a master branchre mergel&eacute;s, k&ouml;zvetlen&uuml;l a develop  branch-ről. Ha a projekt olyan, hogy ez sz&uuml;ks&eacute;ges, ilyenkor a master  branchen tagelek is (ez főleg az&eacute;rt &eacute;rdekes, mert pl. a GitHub minden  tagelt branch-ből l&eacute;trehoz egy let&ouml;lthető forr&aacute;s csomagot, &iacute;gy ezzel  nekem nem kell t&ouml;rődn&ouml;m).</p>

<p>A fő szempont a master-n&eacute;l, hogy itt  mindig stabil, minden v&aacute;ltoztat&aacute;st&oacute;l mentes k&oacute;d legyen, amely b&aacute;rmikor  b&aacute;rhova deployolhat&oacute;, &eacute;s azonnal műk&ouml;dők&eacute;pes.</p>

<p>&Eacute;rdekes k&eacute;rd&eacute;s,  hogy mi legyen azokkal a hotfix t&iacute;pus&uacute; v&aacute;ltoztat&aacute;sokkal, amelyek a  master branchez kellene hogy menjenek, hiszen az &eacute;les alkalmaz&aacute;sban van a  hiba, ugynakkor a develop &aacute;gon m&aacute;r mergelve van egy feature, amit nem  sz&iacute;vesen mergeln&eacute;nk r&aacute; a master &aacute;gra. Nos, &eacute;n &aacute;ltal&aacute;ban megpr&oacute;b&aacute;lok a  helyzethez igazodni. Elősz&ouml;r is, meg kell n&eacute;zni, hogy az adott hiba  előj&ouml;tt-e m&aacute;r a develop &aacute;gon, &eacute;s fix&aacute;lva lett-e. Ha nem, akkor ez az  első l&eacute;p&eacute;s, plusz a megfelelő tesztesetek legy&aacute;rt&aacute;sa, hogy a  tov&aacute;bbiakban ilyen probl&eacute;ma elő ne fordulhasson.
Ha a hiba nem kritikus, a legegyszerűbb megold&aacute;s a hiba jav&iacute;t&aacute;s&aacute;t a k&ouml;vetkező <em>milestone</em>-ig eltolni. De nyilv&aacute;n vannak kritkus hib&aacute;k is, l&aacute;ssuk mi a teendő ezekkel.</p>

<p>A  legegyszerűbb eset, amikor m&eacute;g nem t&ouml;rt&eacute;nt mergel&eacute;s a develop-ra a  master &aacute;gra t&ouml;rt&eacute;nt mergel&eacute;s &oacute;ta, ilyenkor sim&aacute;n &aacute;t lehet venni a hotfix  branch jav&iacute;t&aacute;s&aacute;t.</p>

<p>M&aacute;s esetekben meg kell n&eacute;zni, hogy a  hotfix &aacute;ltal &eacute;rintett f&aacute;jlok milyen m&eacute;rt&eacute;kben v&aacute;ltoztak a master-hez  k&eacute;pest. Erre a git diff parancs ad lehetős&eacute;get. Ha a f&aacute;jl ettől a  v&aacute;ltoztat&aacute;st&oacute;l eltekintve nem v&aacute;ltozott, akkor a bek&uuml;ld&ouml;tt commit-nak  veszem a diff-j&eacute;t (git diff HEAD<sup>..HEAD),</sup> majd alkalmazom csak ezt a  jav&iacute;t&aacute;st a master branchre. Ilyenkor a k&ouml;vetkező mergel&eacute;sn&eacute;l figyelni  kell, mert konfliktus l&eacute;phet fel, ezt sajnos egyedileg le kell kezelni.</p>

<p>Egy m&aacute;sik megold&aacute;sa a probl&eacute;m&aacute;nak, hogy mivel a master &aacute;g az gyakorlatilag a develop &aacute;g egy <em>snapshot</em>-ja,  &iacute;gy abb&oacute;l ind&iacute;tom a hotfix branchet, &eacute;s mind a k&eacute;t &aacute;gra visszamergelem.  Ez tal&aacute;n a legegyszerűbb megold&aacute;sa a probl&eacute;m&aacute;nak - csakhogy  tapasztalatom szerint ez az, ami a legritk&aacute;bban is műk&ouml;dik. Ugyanis  nincs &eacute;rtelme &aacute;lmodozni, a master-ről ind&iacute;tott hotfix branchek az esetek  nagy r&eacute;sz&eacute;ben nem illeszkednek a develop &aacute;gra, conflict alakul ki, &eacute;s  el&eacute;g sok nyűg van, mire oda beilleszkedik, plusz ut&aacute;na a master-ra  t&ouml;rt&eacute;nő mergel&eacute;skor megint kialakulhat conflict. Mindenesetre van, ahol  ez a megold&aacute;s is műk&ouml;dik.</p>

<p>Alternat&iacute;v megold&aacute;s lehet m&eacute;g a  cherry-pick haszn&aacute;lata, mellyel egy darab commit-ot tudunk a develop  branchből &aacute;tvenni a masterre, a mergel&eacute;s kock&aacute;zata n&eacute;lk&uuml;l. Erről m&eacute;g  csak hallottam, nincs gyakorlatom vele, hogy milyen sz&aacute;zal&eacute;kban okozhat  conflict-ot, illetve hogy a --no-ff merge k&eacute;pes-e elkezelni az &aacute;tvett  commit-ot. Illetve ez is csak akkor műk&ouml;dik, ha nincsenek gy&ouml;keres  v&aacute;ltoz&aacute;sok a develop &aacute;gban erre a f&aacute;jlra n&eacute;zve.</p>

<p>Amit a  commit-okr&oacute;l m&eacute;g &eacute;rdemes elmondani: &eacute;n mindig &uacute;n. topic commit-okat  haszn&aacute;lok. Ez azt jelenti, hogy mindig igyekszem olyan commit-okat  gy&aacute;rtani, amelyek &ouml;n&aacute;ll&oacute;ak, &eacute;s pontosan egy dolgot csin&aacute;ljanak. Teh&aacute;t ha  pl. teszteket &iacute;rok, &eacute;s k&ouml;zben sz&uuml;letnek jav&iacute;t&aacute;sok is, amelyek a tesztek  lefut&aacute;s&aacute;hoz kellenek, nem nyitok mindig &uacute;j hotfix branchet (mert egy  lusta diszn&oacute; vagyok), hanem a tesztek &aacute;g&aacute;ba belerakom a v&aacute;ltoz&aacute;st is.  Mivel a tesztek az appra n&eacute;zve nem jelentenek funkcion&aacute;lis v&aacute;ltoz&aacute;st, a  jav&iacute;t&aacute;s viszont igen, &iacute;gy &eacute;n nem &eacute;rzem azt, hogy ennek kock&aacute;zata lenne.  Ellenben nagyon fontos &uuml;gyelni arra, hogy ilyenkor mindig pontosan  azokat a v&aacute;ltoztat&aacute;sokat k&uuml;ldj&uuml;k be, amelyeket azzal a committ-tal  jav&iacute;tunk. Ha kell, <em>hunk</em> (ez a v&aacute;ltoztat&aacute;sok egys&eacute;ge, a diff  kimenet&eacute;ben egy, h&aacute;rom kukaccal kezdődő sorral szepar&aacute;lt blokk) szinten  bontom sz&eacute;t a v&aacute;ltoz&aacute;sokat. Erre nagyon j&oacute; lehetős&eacute;get ad a git add  parancs -p kapcsol&oacute;ja.
Ennek a megold&aacute;snak a legfőbb haszna az, hogy  b&aacute;rhol meg lehet bontani a develop branchet, b&aacute;rhol le lehet &aacute;gaztatni r&oacute;la egy &uacute;j branchet, mindig viszonylag konzisztens &aacute;llapotot fogunk kapni.</p>

<p>&Ouml;sszess&eacute;g&eacute;ben teh&aacute;t a legfőbb alapelvek:</p>

<ul>
<li>A master branchre lehetőleg csak mergel&eacute;s t&ouml;rt&eacute;njen, ide k&ouml;zvetlen&uuml;l (a kezdő commit-t&oacute;l eltekintve) ne k&uuml;ldj&uuml;nk semmit.</li>
<li>A develop branch-en lehet j&aacute;tszani, de &eacute;rdemes figyelni a konzisztenci&aacute;j&aacute;ra</li>
<li>Hotfix branchen a műk&ouml;d&eacute;st alapjaiban &eacute;rintő v&aacute;ltoztat&aacute;s nem t&ouml;rt&eacute;nhet</li>
<li>Mind a hotfix mind a feature brancheket &eacute;rdemes frissen tartani a develop-hoz k&eacute;pest, hogy ne &eacute;rjenek minket nagy meglepet&eacute;sek</li>
</ul>


<p>V&eacute;lem&eacute;nyeket itt alul lehet &iacute;rni, ahogy időm engedi reag&aacute;lni fogok r&aacute;juk.</p>
]]></content>
  </entry>
  
</feed>
