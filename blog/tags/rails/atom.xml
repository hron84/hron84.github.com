<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Hron's blog]]></title>
  <link href="http://hron.me/blog/tags/rails/atom.xml" rel="self"/>
  <link href="http://hron.me/"/>
  <updated>2013-04-07T04:46:21+02:00</updated>
  <id>http://hron.me/</id>
  <author>
    <name><![CDATA[Gábor Garami]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails pre-commit hook]]></title>
    <link href="http://hron.me/blog/2013/02/rails-pre-commit-hook/"/>
    <updated>2013-02-12T23:23:00+01:00</updated>
    <id>http://hron.me/blog/2013/02/rails-pre-commit-hook</id>
    <content type="html"><![CDATA[<p>I just created this small hook for my Rails projects. It helps me to make my codebase clean.</p>

<p><div><script src='https://gist.github.com/4774014.js?file=git-pre-commit-hook.rb'></script>
<noscript><pre><code>#!/usr/bin/env ruby

require 'erb'
require 'yaml'
require 'pp'

lines = %x{git diff-index --cached --name-only HEAD}.split(/[\r\n]+/)

ENV['RAILS_ENV'] = 'test'

lines.each do |file|
  if File.exists?(file) and file =~ /\.(rb|rake|god)$/
    print &quot;[SYNTAX] #{file} - &quot;
    ret = system(&quot;ruby -c '#{file}'&quot;)
    exit 1 unless ret

    if file =~ /_test\.rb$/
      print &quot;[UNIT  ] #{file} - &quot;
      unitcmd = &quot;ruby -Ilib:test #{file}&quot;
      unitcmd = &quot;bundle exec #{unitcmd}&quot; if File.exists?('Gemfile')
      ret = system(unitcmd)
      exit 1 unless ret
    end

    if file =~ /_spec\.rb$/
      print &quot;[SPEC  ] #{file} - &quot;
      rspeccmd = &quot;rspec #{file}&quot;
      rspeccmd = &quot;bundle exec #{rspeccmd}&quot; if File.exists?('Gemfile')
      ret = system(rspeccmd)
      exit 1 unless ret
    end
  end

  if File.exists?(file) and File.basename(file) =~ /^(Capfile|Gemfile|Guardfile|Rakefile|config.ru)$/
    print &quot;[SYNTAX] #{file} - &quot;
    ret = system(&quot;ruby -c '#{file}'&quot;)
    exit 1 unless ret
  end

  if File.exists?(file) and file =~ /\.feature$/
    print &quot;[ (::) ] #{file} - &quot;
    ENV['CUCUMBER_FORMAT'] = 'progress'
    cuccmd = &quot;cucumber #{file}&quot;
    cuccmd = &quot;bundle exec #{cuccmd}&quot; if File.exists?('Gemfile')
    ret = system(cuccmd)
    exit 1 unless ret
  end

  if File.exists?(file) and file =~ /\.(yml|yaml)$/
    print &quot;[SYNTAX] #{file} - &quot;
    begin
      # Load with erb to avoid problems with cucumber's yml
      erb = ERB.new(IO.read(file)).result(binding)
      yaml = YAML.load(erb)
      puts &quot;Syntax OK&quot;
    rescue SyntaxError =&gt; ex
      puts ex.message
      exit 1
    rescue ArgumentError =&gt; ex
      puts ex.message
      exit 1
    end
  end
end
</code></pre></noscript></div>
</p>

<p>You can clone it at <a href="https://gist.github.com/hron84/4774014">Gist</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails - polimorf világ]]></title>
    <link href="http://hron.me/blog/2012/12/rails-polimorf-vilag/"/>
    <updated>2012-12-13T07:23:00+01:00</updated>
    <id>http://hron.me/blog/2012/12/rails-polimorf-vilag</id>
    <content type="html"><![CDATA[<p>Azért vannak dolgok, amikkel lehet szépeket szívni.</p>

<p>A feladat valami olyasmi volt, hogy kell egy újrafelhasználható "cím" osztály, ami külön táblára is képeződne le, hogy ne a megfelelő táblákat terheljük feleslegesen, plusz a címek amúgy se mindig kellenek pl. a felhasználókezeléshez. Azért kell újrafelhasználhatónak lennie, mert két különböző dolog is használ címeket a rendszerben.</p>

<p>Nem akarom nagyon húzni az időt, az alábbi kód született rá:</p>

<p>```ruby Polimophic user profile
class Address &lt; ActiveRecord::Base
  belongs_to :addressable, :polymorphic => true
end</p>

<p>class User &lt; ActiveRecord::Base
  has_many  :addresses, :as => :addressable
  has_one   :billing_address , :as => :addressable, :class_name => 'Address', :conditions => { :billable => true, :shippable => false }
  has_one   :shipping_address, :as => :addressable, :class_name => 'Address', :conditions => { :shippable => true, :billable => false }
end
```</p>

<p>Erre kedves barátom azt mondaná, hogy szép baleset. És akkor még nagyon finoman fogalmazna. Nézzük, mik azok a buktatók, amin át lehet esni egy ilyet nézve:</p>

<ul>
<li>A has_many asszociáció ugye azért kell, hogy legyen valami, ami polimorf. Elvben bele lehet suvasztani a has_one mellé is, de nekem egyébként is kell tudnom a címeket egyben
lekérni, akkor meg miért ne emelném ki?</li>
<li>Az előbbi asszociáció alapján definiálunk két hozzárendelést. Ugye itt a hangsúly a :conditions hashen van, ez mondja meg, hogy a polimorf tömbből mely adatok kellenek
(pontosabban, hogy az asszociáció alapján generált query-ben a WHERE feltétel hogyan bővüljön)</li>
<li>Az egyik trükk az, hogy mindenképp meg kell adni az osztályt is, ugyanis a has_one asszociáció <em>nem</em> kéri le ezt az infót a hivatkozott polimorf asszociációtól, hanem saját
maga áll neki találgatni - természetesen rosszul.</li>
<li>A másik trükk pedig, hogy mivel ez egy kétparaméteres, egymást kölcsönösen kizáró feltétel, így <em>mindkettőt</em> meg kell adni, különben létrehozáskor előjöhet olyan csúfság, hogy
valaki meghinteli a dupla false-t - vagyis úgy mentünk el pl. egy billing címet, hogy az elvész az :addresses tömb nevű fekete lyukban (van értelme amúgy a dupla false-nak is,
csak abból nem billing meg shipping címek lesznek, hanem csak címek). Azaz, mentéskor a billing_address-en keresztül mentünk, de a mentés után a billing_address pont ugyanolyan
<code>nil</code> lesz, mint előtte volt vala.</li>
</ul>


<p>Azért ezzel is sikerült egy jó órát szívni...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMine és TeamCity]]></title>
    <link href="http://hron.me/blog/2012/11/rubymine-es-teamcity/"/>
    <updated>2012-11-11T11:08:00+01:00</updated>
    <id>http://hron.me/blog/2012/11/rubymine-es-teamcity</id>
    <content type="html"><![CDATA[<p>Már régóta keresek egy olyan IDE-t, ami képes nem csak projektszinten kezelni és szintaxis-kiemelést adni a Ruby/Rails projektjeimnek,
de magát a nyelvet is "beszéli", vagyis van például kódkiegészítés, refaktorálás, figyelmeztetések, etc, etc.
Az általam eddig ismert legkomolyabb IDE, a NetBeans is csak elég alapszinten beszélte a Ruby nyelvet - aztán ki is vették belőle a támogatást,
jelenleg a plugin folyamatosan haláltusáját vívja, 7.2-höz már meg sem jelent semmiféle verzió.</p>

<p>Egy StackOverflow böngészés során akadtam rá a JetBrains <a href="http://www.jetbrains.com/ruby/">RubyMine</a> nevű IDE-jére. Saját bevallásuk szerint az
eszköz képes nyelvi szinten is kezelni a Ruby-t, illetve támogatja az összes nagyobb teszkörnyezetet. Mivel amúgy is épp indítottam egy projektet,
úgy gondoltam, adok neki egy esélyt, hát legfeljebb letörlöm, és folytatom az eddigi módon, TextMate és Vim párossal. Szerencsére csalódtam. Pozitívan.
Hatalmasat.</p>

<p>A RubyMine ugyanis nem csak egyszerűen jó, hanem - amennyire tudom - a maga nemében jelenleg páratlan a piacon azzal, hogy tényleg hozza azt, amit ígér,
vagyis teljes mértékben támogatja a Ruby nyelvet és a Rails keretrendszert, sőt, még ennél is tovább megy, beépített támogatása van a lokalizációk kezeléséhez,
grafikusan mutatja, hogy mely mdoeljeink vannak adatbázisban, képes a Rails projekt szerkezetét Rails-aspektusú nézetben mutatni (ahol nem mappák és fájlok vannak,
hanem kategóriák, pl. Controllers, Models, Helpers), a kontrollerek akcióihoz hozzá tudja rendelni a nézeteket, partialokat, a refaktor során pedig olyan mélységekbe is
lemegy, amiről álmodni sem mertem soha - egy modell átnevezésekor képes a nézetekben is utánanézni az útvonal metódusoknak, és megfelelően átnevezni azokat!</p>

<p>Ezen felül csak úgy mellékesen, képes kezelni az <a href="http://rvm.io">RVM</a>-et, támogatja a <a href="http://gembundler.com/">Bundler</a>t, a Rails generátorokat, a Rake taszkokat, SCSS-t meg CoffeeScript-et, ... meg ilyen kis semmiségeket is.</p>

<p>Az egyetlen probléma vele a kissé hiperaktív kódkiegészítése, ha leírok egy nyilat, rögtön ugrana rá, pedig én magamtól szoktam szóközt is ütni utána, de azzal meg
elfogadom az első lehetőséget is egyben - ami általában rossz ötlet. Biztos le lehet valahogy beszélni róla, majd utánanézek (de ha valaki tudja a tuti megoldást,
a komment doboz mindig nyitott az ilyesmikre :-) ), egyelőre még elviselem.</p>

<p>Jelenleg folyamatosan használom az épp aktív projektemhez, teljesen jól szolgál, bár még képességeinek csak szerény részét használom. Most egyelőre a 30 napos
próbaidőszakban vagyunk (dicséretes, hogy ez alatt sem ugrál föl valami kis ablak indításkor, hogy még 22.45 nap van hátra, és mostazonnal vedd meg - ez rém undorító,
ha tetszik, úgyis megveszem - főleg, mert lejár -, ha meg nem tetszik, akkor ez a kapacitálás csak ront a dolgon), ám azt gondolom, hogy a 66 euro a személyes licencért abszolút megéri.</p>

<p>Amit nem használok belőle (sem), az a Git integráció, nekem a git még mindig parancssoros dolgot jelent, egyszerűbb kiadni a <code>git co feature-awesome-stuff</code> parancsot,
mint GUI-ban kikattintgatni. Legalábbis szerintem.</p>

<p>A JetBrains honlapját tallózgatva (ismét) ráakadtam a <a href="http://www.jetbrains.com/teamcity/">TeamCity</a> nevű CI szerverre is, ezzel egyszer volt már egy futó kapcsolatom, de
valamiért nem sikerült telepíteni, és a végén Jenkins lett belőle. Most ismét kapott tőlem egy lehetőséget, hogy elinduljon, és meggyőzzön. Ezúttal mindkettő sikerült is neki.</p>

<p>A TeamCity-ről azt érdemes tudni, hogy egy olyan Continous Integration szerver (továbbiakban CI szerver), melyet nagyon egyszerű kezelni, és nagyon jól áttekinthető felületet
ad, még egy felületes szemlélő számára is (ezt muszáj volt elsütni :-) ).</p>

<p>A RubyMine fejlesztők blogján pedig találtam egy <a href="http://blog.jetbrains.com/ruby/2009/11/jetbrains-teamcity-continuous-integration-for-ruby/">írást</a>, mely borzasztóan felcsigázta a kíváncsiságomat.
Azt merték ugyanis állítani, hogy  TeamCity beépítetten képes kezelni a RSpec és a Cucumber tesztek kimenetét, arrol riportot készít, hibáról értesít. Plusz, a TeamCity beépítetten támogatja az XMPP alapú notifikációt, amit pl. a Jenkins csak pluginnel tud.</p>

<p>Sajnos a TeamCity egyik hiányossága, hogy ő viszont már csak korlátozott mértékben képes kezelni a Bundlert: képes felismerni a létét, és azon keresztül futtatni a rake taszkokat, de már pl. egy <code>bundle install</code> -t képtelen elengedni, azt kézzel kell egy külön Build Step-ben, viszonylag kacifántosan megoldani. Végül sikerült, de azért nem voltam felhőtlenül boldog.
Viszont az első teszteredmények feledtették velem az ezen a téren történt csalódást, mert pontosan azt kaptam, amit elvártam: mindenféle külön konfiguráció nélkül jelenítete meg a Cucumber es RSpec tesztek eredményét, ráadásul egy egészen barátságos felületen.</p>

<p>Tényleg nem JetBrains reklámnak szánom ezt a postot, de azért annyira érződik mindkét terméken, hogy ezeket olyanok fejlesztik, akik láttak már közelről Rails projektet, meg RVM-et, meg ilyesmit... például a Jenkins Ruby pluginjénél nem volt ilyen érzésem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guard - projektjeink testőre]]></title>
    <link href="http://hron.me/blog/2012/10/guard-projektjeink-testore/"/>
    <updated>2012-10-23T14:37:00+02:00</updated>
    <id>http://hron.me/blog/2012/10/guard-projektjeink-testore</id>
    <content type="html"><![CDATA[<p>Nem olyan régen ismerkedtem meg a <a href="https://github.com/guard/guard">guard</a> nevű
gemmel, ami egy nagyon hasznos kis szerszám annak, aki Rails fejlesztésre adja
a fejét, de plug-injei révén például PHP fejlesztők is profitálhatnak a tudásából.</p>

<!-- more -->


<p>Ez a kis cucc arra képes, hogy figyelje a projekt fájljait változások után
kutatva, és amikor változik valami, pl. elmentünk egy fájlt, akkor végre tud
hajtani bizonyos műveleteket.</p>

<p>Vegyünk két nagyon alap kis példát:</p>

<p>Van egy PHP projektünk, melyben PHPunit teszteket szeretnénk futtatni. Minden
egyes osztályunkhoz tartozik, egy hasonló nevű teszt osztály, csak Test van a
végén. Tehát a User -t a UserTest, a Car-t a CarTest osztály teszteli. Ekkor:</p>

<p>```ruby Guard konfiguráció PHPUnit-hoz https://github.com/guard/guard-phpunit Több infó
guard 'phpunit', :tests_path => 'Tests', :cli => '--colors' do
  # Figyeljük az összes teszt osztály változását
  watch(%r{<sup>.+Test.php$})</sup></p>

<p>  # Figyeljük az osztályok változását, és futtatjuk a megfelelő teszteket
  watch(%r{<sup>Classes/(.+).php})</sup> { |m| "Tests/#{m[1]}Test.php" }
end
```</p>

<p>Nem kell aggódni, ha a második esetnél az adott teszt osztály nem létezik,
akkor egyszerűen nem történik semmi.</p>

<p>A Guard-hoz rengeteg féle <a href="https://github.com/guard">plug-in</a> létezik már,
de legrosszabb esetben lehetséges shell parancsokat is <a href="https://github.com/guard/guard-shell">futtatni</a>
fájlváltozáskor.</p>

<p>Amire érdemes odafigyelni, az a függőségek. A Guard-nak egyrészt szüksége
van a platformunknak megfelelő fájlváltozás-érzékelő plug-inre, illetve
mivel képes minden platformon a platformnak megfelelően értesítést is
küldeni, így ezeket a plug-injeit is megfelelően konfigurálni kell.</p>

<p>Néhány dolog, amire figyelni kell:</p>

<ul>
<li>Mac OS X 10.8-nél korábbi verziólnál szükséges a <a href="http://growl.info">Growl</a> telepítése
(10.8-hoz van plug-in a beépített értesítési rendszer használatára)</li>
<li>Windows alatt a <a href="https://github.com/luislavena/win32console">win32console</a> gem nélkül nincsenek színek</li>
</ul>


<p>Emiatt én mindig Gemfile segítségével telepítem. Egy alap Gemfile álljon itt ehhez:</p>

<p>```ruby Gemfile Guard használatához
group :development do
  # Guard
  gem 'guard', '~> 1.4.0'
  if RUBY_PLATFORM =~ /darwin/i</p>

<pre><code>if %x{sw_vers -productVersion}.strip =~ /^10\.8/
  gem 'terminal-notifier-guard'
else
  gem 'ruby_gntp'
end
gem 'rb-fsevent', '~&gt; 0.9.1', :require =&gt; false
</code></pre>

<p>  elsif RUBY_PLATFORM =~ /linux/i</p>

<pre><code>gem 'rb-inotify', :require =&gt; false 
</code></pre>

<p>  elsif RUBY_PLATFORM =~ /(mswin|mingw)/i</p>

<pre><code>gem 'win32console', :require =&gt; false
gem 'wdm', :require =&gt; false
</code></pre>

<p>  end</p>

<p>  # Guard plug-ins
  gem 'guard-phpunit'
end
```</p>

<p>A függőségek telepítése a <code>bundle install</code> míg a Guard futtatása a <code>bundle exec guard start</code> paranccsal zajlik.</p>

<p>A Guard fájlt használatba vétel előtt inicializálni is kell, ezt a <code>bundle exec guard init</code> paranccsal tehetjük meg.
Ha menet közben telepítünk olyan plug-int, mely futtatásra alkalmas (tehát nem értesítő plug-in), akkor azt a
<code>bundle exec guard init PLUGIN_NAME</code> paranccsal tehetjük meg, a plug-in neve pedig mindig a guard- után álló rész (pl. shell).
Egyébként a legtöbb plug-in README fájlja nagyon részletes útmutatót tartalmaz a plug-in használatáról.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins, RVM, Bundler]]></title>
    <link href="http://hron.me/blog/2012/02/jenkins-rvm-bundler/"/>
    <updated>2012-02-15T22:57:00+01:00</updated>
    <id>http://hron.me/blog/2012/02/jenkins-rvm-bundler</id>
    <content type="html"><![CDATA[<p>Preface: Sorry for my poor english.</p>

<p>So, today I started thinking on how can I compile my rails app to different Ruby versions. Luckily, I discovered, Jenkins can use RVM to run rake tasks.</p>

<p>I initialized rvm following <a href="http://watirmelon.com/2011/08/29/running-your-watir-webdriver-tests-in-the-cloud-for-free/">this tutorial</a> but I just skipped EC2 instance creation, because I currently has a CI server. I installed three ruby version, MRI 1.8.7, MRI 1.9.3, and JRuby latest stable.</p>

<p>First, I created a Rakefile.bootstrap file in my project root to make bundle install phase to rake-ized because I wouldn't like run this via shell state, as because I need to select the correct rvm what is can be changed and I wouldn't like administer it on thee or more places.</p>

<p>Then, I was naive. I thinked I use separated gemset to avoid infecting global ruby scope with my project's gems.</p>

<p>This is quite easy, I sudo-ed to jenkins, and created gemset by <code>rvm gemset create rhcp</code>. After viewing and saving Jenkins' main configuration are, rake plugin recognized this gemset, and offered to use it.</p>

<p>I clicked on it, saved the project, clicked on build, and pray (in the future: c&amp;p). No luck.</p>

<p>I spent a half of hour with investigation, and I found I need install rake to the target gemset too, not enough if it is installed with ruby or installed to the @global gemset. I installed rake, c&amp;p. No luck.</p>

<p>After it, I ran into <a href="http://stackoverflow.com/questions/3456304/rake-aborted-stack-level-too-deep">this problem</a>. Because rake loaded twice, it lost in the stack, and just gave up.</p>

<p>So, I added rake proxy for my bootstrap Rake file. It means calls the rake command prefixed by 'bundle exec' since Jenkins cannot do this. Bundler cleans out unneccessary gems (eg.g what coming from @global, or from ruby itself) and executes rake command.</p>

<p>This is the final Rakefile.bootstrap if you want to use it:</p>

<p>&nbsp;</p>

<script src="https://gist.github.com/1838983.js?file=gistfile1.rb"></script>

]]></content>
  </entry>
  
</feed>
